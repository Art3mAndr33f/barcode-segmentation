#!/usr/bin/env python3
"""
–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ MLOps –ø—Ä–æ–µ–∫—Ç–∞.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç Fire –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞.

–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
    python commands.py preprocess --config_path configs/data/preprocessing.yaml
    python commands.py train --config_path configs/train.yaml
    python commands.py infer --config_path configs/inference.yaml
    python commands.py setup_dvc --remote_url s3://my-bucket/data
    python commands.py serve --port 8000
"""

import logging
import subprocess
import sys
from pathlib import Path
from typing import Optional

import fire

from barcode_segmentation.data.preprocessing import DataPreprocessor
from barcode_segmentation.deployment.inference_server import InferenceServer
from barcode_segmentation.deployment.onnx_converter import ONNXConverter
from barcode_segmentation.deployment.tensorrt_converter import TensorRTConverter
from barcode_segmentation.inference.predictor import BarcodePredictor
from barcode_segmentation.training.trainer import BarcodeTrainer

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[logging.StreamHandler(sys.stdout)],
)
logger = logging.getLogger(__name__)


class BarcodeSegmentationCLI:
    """
    –ì–ª–∞–≤–Ω—ã–π CLI –∫–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–º —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ —à—Ç—Ä–∏—Ö-–∫–æ–¥–æ–≤.
    
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö —ç—Ç–∞–ø–æ–≤ MLOps pipeline:
    - –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    - –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
    - –ò–Ω—Ñ–µ—Ä–µ–Ω—Å
    - –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π
    - –î–µ–ø–ª–æ–π–º–µ–Ω—Ç
    - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    """

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CLI —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
        self.project_root = Path(__file__).parent.resolve()
        logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω CLI –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {self.project_root}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞
        self._validate_project_structure()

    def _validate_project_structure(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –ø—Ä–æ–µ–∫—Ç–∞."""
        required_dirs = ["src", "configs", "data"]
        missing_dirs = []
        
        for dir_name in required_dirs:
            dir_path = self.project_root / dir_name
            if not dir_path.exists():
                missing_dirs.append(dir_name)
                
        if missing_dirs:
            logger.warning(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {missing_dirs}")
        else:
            logger.info("‚úì –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ –≤–∞–ª–∏–¥–Ω–∞")

    def preprocess(self, config_path: str = "configs/data/preprocessing.yaml") -> None:
        """
        –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∏ –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–µ–π.

        Args:
            config_path: –ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –¥–ª—è –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        logger.info(f"üîÑ –ó–∞–ø—É—Å–∫ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å –∫–æ–Ω—Ñ–∏–≥–æ–º: {config_path}")
        
        try:
            preprocessor = DataPreprocessor()
            preprocessor.run(config_path)
            logger.info("‚úÖ –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise

    def train(self, config_path: str = "configs/train.yaml") -> None:
        """
        –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤ MLflow.

        Args:
            config_path: –ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
        """
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ —Å –∫–æ–Ω—Ñ–∏–≥–æ–º: {config_path}")
        
        try:
            trainer = BarcodeTrainer()
            trainer.run(config_path)
            logger.info("‚úÖ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏: {e}")
            raise

    def infer(self, config_path: str = "configs/inference.yaml") -> None:
        """
        –ó–∞–ø—É—Å–∫ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞ –º–æ–¥–µ–ª–∏ –Ω–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö.

        Args:
            config_path: –ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –¥–ª—è –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞
        """
        logger.info(f"üîÆ –ó–∞–ø—É—Å–∫ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞ –º–æ–¥–µ–ª–∏ —Å –∫–æ–Ω—Ñ–∏–≥–æ–º: {config_path}")
        
        try:
            predictor = BarcodePredictor()
            predictor.run(config_path)
            logger.info("‚úÖ –ò–Ω—Ñ–µ—Ä–µ–Ω—Å –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–µ: {e}")
            raise

    def convert_to_onnx(self, config_path: str = "configs/deployment.yaml") -> None:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –≤ ONNX —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∫—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–≥–æ –¥–µ–ø–ª–æ–π–º–µ–Ω—Ç–∞.

        Args:
            config_path: –ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –¥–ª—è –¥–µ–ø–ª–æ–π–º–µ–Ω—Ç–∞
        """
        logger.info(f"üì¶ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –≤ ONNX —Å –∫–æ–Ω—Ñ–∏–≥–æ–º: {config_path}")
        
        try:
            converter = ONNXConverter()
            converter.run(config_path)
            logger.info("‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ ONNX –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ ONNX: {e}")
            raise

    def convert_to_tensorrt(self, config_path: str = "configs/deployment.yaml") -> None:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –≤ TensorRT —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –Ω–∞ NVIDIA GPU.

        Args:
            config_path: –ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –¥–ª—è –¥–µ–ø–ª–æ–π–º–µ–Ω—Ç–∞
        """
        logger.info(f"‚ö° –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –≤ TensorRT —Å –∫–æ–Ω—Ñ–∏–≥–æ–º: {config_path}")
        
        try:
            converter = TensorRTConverter()
            converter.run(config_path)
            logger.info("‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ TensorRT –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ TensorRT: {e}")
            raise

    def serve(
        self,
        host: str = "0.0.0.0",
        port: int = 8000,
        model_path: Optional[str] = None,
        config_path: str = "configs/inference.yaml"
    ) -> None:
        """
        –ó–∞–ø—É—Å–∫ inference —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è API –¥–æ—Å—Ç—É–ø–∞ –∫ –º–æ–¥–µ–ª–∏.

        Args:
            host: –•–æ—Å—Ç –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
            port: –ü–æ—Ä—Ç –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
            model_path: –ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            config_path: –ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        """
        logger.info(f"üåê –ó–∞–ø—É—Å–∫ inference —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ {host}:{port}")
        
        try:
            server = InferenceServer(
                host=host,
                port=port,
                model_path=model_path,
                config_path=config_path
            )
            server.run()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            raise

    def setup_dvc(self, remote_url: Optional[str] = None) -> None:
        """
        –ù–∞—Å—Ç—Ä–æ–π–∫–∞ DVC –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ –∏ –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.

        Args:
            remote_url: URL —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ (S3, GCS, Azure, etc.)
        """
        logger.info("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ DVC –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏")
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º DVC
            result = subprocess.run(
                ["dvc", "init"], 
                cwd=self.project_root,
                capture_output=True,
                text=True
            )
            
            if result.returncode == 0:
                logger.info("‚úì DVC –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            else:
                logger.warning(f"DVC —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {result.stderr}")

            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª—å DVC
            data_dirs = ["data/raw", "models"]
            for data_dir in data_dirs:
                if (self.project_root / data_dir).exists():
                    subprocess.run(["dvc", "add", data_dir], cwd=self.project_root)
                    logger.info(f"‚úì –î–æ–±–∞–≤–ª–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {data_dir} –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª—å DVC")

            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            if remote_url:
                subprocess.run(
                    ["dvc", "remote", "add", "-d", "storage", remote_url], 
                    cwd=self.project_root
                )
                logger.info(f"‚úì –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ —É–¥–∞–ª–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: {remote_url}")

            logger.info("‚úÖ DVC –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            
        except subprocess.CalledProcessError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ DVC: {e}")
            raise
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ DVC: {e}")
            raise

    def setup_mlflow(self, tracking_uri: str = "http://127.0.0.1:8080") -> None:
        """
        –ù–∞—Å—Ç—Ä–æ–π–∫–∞ MLflow –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤.

        Args:
            tracking_uri: URI –¥–ª—è MLflow tracking server
        """
        logger.info(f"üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∞ MLflow —Å tracking URI: {tracking_uri}")
        
        try:
            import mlflow
            
            mlflow.set_tracking_uri(tracking_uri)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            client = mlflow.tracking.MlflowClient(tracking_uri)
            experiments = client.search_experiments()
            
            logger.info(f"‚úì MLflow –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            logger.info(f"‚úì –ù–∞–π–¥–µ–Ω–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤: {len(experiments)}")
            logger.info(f"‚úÖ MLflow –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: {tracking_uri}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ MLflow: {e}")
            raise

    def setup_environment(self) -> None:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞."""
        logger.info("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞")
        
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º pre-commit hooks
            subprocess.run(["pre-commit", "install"], cwd=self.project_root, check=True)
            logger.info("‚úì Pre-commit hooks —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            dirs_to_create = [
                "data/raw", "data/processed", "data/interim",
                "models", "outputs", "plots", "logs"
            ]
            
            for dir_path in dirs_to_create:
                (self.project_root / dir_path).mkdir(parents=True, exist_ok=True)
                
            logger.info("‚úì –°–æ–∑–¥–∞–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            self.setup_dvc()
            self.setup_mlflow()
            
            logger.info("‚úÖ –û–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {e}")
            raise

    def health_check(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã."""
        logger.info("üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã")
        
        checks = {
            "Project Structure": self._check_project_structure,
            "Dependencies": self._check_dependencies,
            "DVC": self._check_dvc,
            "MLflow": self._check_mlflow,
            "Data": self._check_data,
        }
        
        results = {}
        for check_name, check_func in checks.items():
            try:
                results[check_name] = check_func()
                logger.info(f"‚úì {check_name}: OK")
            except Exception as e:
                results[check_name] = False
                logger.error(f"‚ùå {check_name}: {e}")
        
        # –°–≤–æ–¥–∫–∞
        passed = sum(results.values())
        total = len(results)
        logger.info(f"üìã –°–≤–æ–¥–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
        
        if passed == total:
            logger.info("‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        else:
            logger.warning("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")

    def _check_project_structure(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞."""
        required_paths = [
            "src/barcode_segmentation",
            "configs",
            "pyproject.toml",
            "README.md"
        ]
        return all((self.project_root / path).exists() for path in required_paths)

    def _check_dependencies(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π."""
        try:
            import torch
            import lightning
            import hydra
            import mlflow
            return True
        except ImportError:
            return False

    def _check_dvc(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ DVC."""
        return (self.project_root / ".dvc").exists()

    def _check_mlflow(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ MLflow."""
        try:
            import mlflow
            mlflow.get_tracking_uri()
            return True
        except Exception:
            return False

    def _check_data(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö."""
        data_dir = self.project_root / "data" / "raw"
        return data_dir.exists() and any(data_dir.iterdir())


def main() -> None:
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ CLI.
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Fire –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    –∏–∑ –∫–ª–∞—Å—Å–∞ BarcodeSegmentationCLI.
    """
    try:
        fire.Fire(BarcodeSegmentationCLI)
    except KeyboardInterrupt:
        logger.info("üõë –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()