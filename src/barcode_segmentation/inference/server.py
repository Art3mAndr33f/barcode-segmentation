#!/usr/bin/env python3
"""
FastAPI —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞ –º–æ–¥–µ–ª–∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ —à—Ç—Ä–∏—Ö-–∫–æ–¥–æ–≤.

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç REST API –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –º–æ–¥–µ–ª–∏.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.

Endpoints:
- GET /health - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞
- POST /predict - –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
- GET /metrics - –º–µ—Ç—Ä–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
- GET /docs - Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
"""

import asyncio
import io
import logging
import time
from typing import Dict, List, Optional

import cv2
import numpy as np
import uvicorn
from fastapi import FastAPI, File, HTTPException, UploadFile, status
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from PIL import Image
from pydantic import BaseModel, Field

from barcode_segmentation.inference.predictor import BarcodePredictor
from barcode_segmentation.utils.visualizer import Visualizer

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class PredictionRequest(BaseModel):
    """–ú–æ–¥–µ–ª—å –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è."""
    confidence_threshold: float = Field(default=0.5, ge=0.0, le=1.0)
    return_visualization: bool = Field(default=False)
    output_format: str = Field(default="json", regex="^(json|coco)$")


class BoundingBox(BaseModel):
    """–ú–æ–¥–µ–ª—å –¥–ª—è bounding box."""
    x1: float = Field(..., description="Left coordinate")
    y1: float = Field(..., description="Top coordinate") 
    x2: float = Field(..., description="Right coordinate")
    y2: float = Field(..., description="Bottom coordinate")
    confidence: float = Field(..., ge=0.0, le=1.0)


class SegmentationMask(BaseModel):
    """–ú–æ–¥–µ–ª—å –¥–ª—è –º–∞—Å–∫–∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏."""
    polygon: List[List[float]] = Field(..., description="Polygon coordinates")
    area: float = Field(..., ge=0.0)
    confidence: float = Field(..., ge=0.0, le=1.0)


class PredictionResult(BaseModel):
    """–ú–æ–¥–µ–ª—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è."""
    bounding_boxes: List[BoundingBox] = Field(default_factory=list)
    segmentation_masks: List[SegmentationMask] = Field(default_factory=list)
    processing_time: float = Field(..., description="Processing time in seconds")
    image_shape: tuple = Field(..., description="Original image dimensions (H, W, C)")
    num_detections: int = Field(..., description="Number of detected barcodes")


class HealthResponse(BaseModel):
    """–ú–æ–¥–µ–ª—å –æ—Ç–≤–µ—Ç–∞ health check."""
    status: str
    timestamp: float
    model_loaded: bool
    version: str


class MetricsResponse(BaseModel):
    """–ú–æ–¥–µ–ª—å –æ—Ç–≤–µ—Ç–∞ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏."""
    total_requests: int
    total_predictions: int
    average_processing_time: float
    uptime_seconds: float


class InferenceServer:
    """
    –°–µ—Ä–≤–µ—Ä –¥–ª—è –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞ –º–æ–¥–µ–ª–∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ —à—Ç—Ä–∏—Ö-–∫–æ–¥–æ–≤.
    
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
    - –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤
    - –í–∞–ª–∏–¥–∞—Ü–∏—é –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    - –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏  
    - Health checks
    - CORS –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    """

    def __init__(
        self,
        host: str = "0.0.0.0",
        port: int = 8000,
        model_path: Optional[str] = None,
        config_path: str = "configs/inference.yaml"
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞.
        
        Args:
            host: –•–æ—Å—Ç –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
            port: –ü–æ—Ä—Ç –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
            model_path: –ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏
            config_path: –ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        """
        self.host = host
        self.port = port
        self.model_path = model_path
        self.config_path = config_path
        
        # –ú–µ—Ç—Ä–∏–∫–∏
        self.start_time = time.time()
        self.total_requests = 0
        self.total_predictions = 0
        self.processing_times = []
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI
        self.app = FastAPI(
            title="Barcode Segmentation API",
            description="REST API –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ —à—Ç—Ä–∏—Ö-–∫–æ–¥–æ–≤",
            version="1.0.0",
            docs_url="/docs",
            redoc_url="/redoc"
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
        self.app.add_middleware(
            CORSMiddleware,
            allow_origins=["*"],
            allow_credentials=True,
            allow_methods=["*"],
            allow_headers=["*"],
        )
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏
        self.predictor = None
        self.visualizer = None
        self._setup_routes()

    async def _load_model(self) -> None:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏."""
        try:
            logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏...")
            self.predictor = BarcodePredictor()
            self.predictor.load_model(self.model_path, self.config_path)
            self.visualizer = Visualizer()
            logger.info("‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
            raise

    def _setup_routes(self) -> None:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤ API."""
        
        @self.app.on_event("startup")
        async def startup_event():
            """–°–æ–±—ã—Ç–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞."""
            await self._load_model()
            logger.info(f"üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ {self.host}:{self.port}")

        @self.app.get("/health", response_model=HealthResponse)
        async def health_check():
            """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞."""
            return HealthResponse(
                status="healthy" if self.predictor else "loading",
                timestamp=time.time(),
                model_loaded=self.predictor is not None,
                version="1.0.0"
            )

        @self.app.get("/metrics", response_model=MetricsResponse)
        async def get_metrics():
            """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ —Å–µ—Ä–≤–µ—Ä–∞."""
            avg_time = (
                sum(self.processing_times) / len(self.processing_times)
                if self.processing_times else 0.0
            )
            
            return MetricsResponse(
                total_requests=self.total_requests,
                total_predictions=self.total_predictions,
                average_processing_time=avg_time,
                uptime_seconds=time.time() - self.start_time
            )

        @self.app.post("/predict", response_model=PredictionResult)
        async def predict(
            file: UploadFile = File(...),
            confidence_threshold: float = 0.5,
            return_visualization: bool = False
        ):
            """
            –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
            
            Args:
                file: –ó–∞–≥—Ä—É–∂–∞–µ–º–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                confidence_threshold: –ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                return_visualization: –í–æ–∑–≤—Ä–∞—â–∞—Ç—å –ª–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
                
            Returns:
                –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å –¥–µ—Ç–µ–∫—Ü–∏—è–º–∏ –∏ –º–∞—Å–∫–∞–º–∏
            """
            start_time = time.time()
            self.total_requests += 1
            
            try:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–∏
                if not self.predictor:
                    raise HTTPException(
                        status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
                        detail="–ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞"
                    )
                
                # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
                if not file.content_type.startswith("image/"):
                    raise HTTPException(
                        status_code=status.HTTP_400_BAD_REQUEST,
                        detail="–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º"
                    )
                
                # –ß—Ç–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                image_bytes = await file.read()
                image = Image.open(io.BytesIO(image_bytes))
                image_array = np.array(image)
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ BGR –¥–ª—è OpenCV
                if len(image_array.shape) == 3:
                    image_array = cv2.cvtColor(image_array, cv2.COLOR_RGB2BGR)
                
                # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
                predictions = await self._predict_async(
                    image_array, confidence_threshold
                )
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                bboxes = []
                masks = []
                
                for pred in predictions:
                    # Bounding boxes
                    if "bbox" in pred:
                        bbox = pred["bbox"]
                        bboxes.append(BoundingBox(
                            x1=float(bbox[0]),
                            y1=float(bbox[1]),
                            x2=float(bbox[2]),
                            y2=float(bbox[3]),
                            confidence=float(pred.get("confidence", 0.0))
                        ))
                    
                    # Segmentation masks
                    if "mask" in pred:
                        mask_data = pred["mask"]
                        masks.append(SegmentationMask(
                            polygon=mask_data.get("polygon", []),
                            area=float(mask_data.get("area", 0.0)),
                            confidence=float(pred.get("confidence", 0.0))
                        ))
                
                processing_time = time.time() - start_time
                self.processing_times.append(processing_time)
                self.total_predictions += 1
                
                return PredictionResult(
                    bounding_boxes=bboxes,
                    segmentation_masks=masks,
                    processing_time=processing_time,
                    image_shape=image_array.shape,
                    num_detections=len(predictions)
                )
                
            except HTTPException:
                raise
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏: {e}")
                raise HTTPException(
                    status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                    detail=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}"
                )

        @self.app.exception_handler(Exception)
        async def global_exception_handler(request, exc):
            """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π."""
            logger.error(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {exc}")
            return JSONResponse(
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                content={"detail": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}
            )

    async def _predict_async(
        self, image: np.ndarray, confidence_threshold: float
    ) -> List[Dict]:
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è.
        
        Args:
            image: –í—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            confidence_threshold: –ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            
        Returns:
            –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
        """
        loop = asyncio.get_event_loop()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ executor
        predictions = await loop.run_in_executor(
            None, 
            self.predictor.predict,
            image,
            confidence_threshold
        )
        
        return predictions

    def run(self) -> None:
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞."""
        logger.info(f"üåê –ó–∞–ø—É—Å–∫ inference —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ {self.host}:{self.port}")
        
        try:
            uvicorn.run(
                self.app,
                host=self.host,
                port=self.port,
                log_level="info",
                access_log=True
            )
        except KeyboardInterrupt:
            logger.info("üõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            raise


def main() -> None:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞."""
    import argparse
    
    parser = argparse.ArgumentParser(description="Inference Server")
    parser.add_argument("--host", default="0.0.0.0", help="Server host")
    parser.add_argument("--port", type=int, default=8000, help="Server port")
    parser.add_argument("--model-path", help="Path to model")
    parser.add_argument("--config-path", default="configs/inference.yaml")
    
    args = parser.parse_args()
    
    server = InferenceServer(
        host=args.host,
        port=args.port,
        model_path=args.model_path,
        config_path=args.config_path
    )
    
    server.run()


if __name__ == "__main__":
    main()