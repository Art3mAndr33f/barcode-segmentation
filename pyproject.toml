[tool.poetry]
name = "barcode-segmentation"
version = "0.1.0"
description = "MLOps проект для сегментации штрих-кодов с использованием Detectron2"
authors = ["Your Name <your.email@example.com>"]
readme = "README.md"
packages = [{include = "barcode_segmentation", from = "src"}]

[tool.poetry.dependencies]
python = "^3.8"
torch = "^2.0.0"
torchvision = "^0.15.0"
lightning = "^2.0.0"
hydra-core = "^1.3.0"
mlflow = "^2.0.0"
dvc = "^3.0.0"
opencv-python = "^4.8.0"
numpy = "^1.24.0"
pandas = "^2.0.0"
matplotlib = "^3.7.0"
scikit-learn = "^1.3.0"
onnx = "^1.14.0"
onnxruntime = "^1.15.0"
fire = "^0.5.0"
pathlib = "^1.0.1"
pyyaml = "^6.0"
omegaconf = "^2.3.0"
tensorrt = {version = "^8.6.0", optional = true}
tritonclient = {version = "^2.34.0", optional = true}

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
pytest-cov = "^4.1.0"
black = "^23.7.0"
isort = "^5.12.0"
flake8 = "*"
pre-commit = "^3.3.0"
jupyter = "^1.0.0"
ipykernel = "^6.25.0"

[tool.poetry.extras]
tensorrt = ["tensorrt"]
triton = ["tritonclient"]

[tool.poetry.scripts]
barcode-train = "barcode_segmentation.training.trainer:main"
barcode-infer = "barcode_segmentation.inference.predictor:main"
barcode-convert = "barcode_segmentation.deployment.onnx_converter:main"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["barcode_segmentation"]

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
exclude = [".git", "__pycache__", "build", "dist"]
